// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/atomix/dazl (interfaces: Writer)

// Package dazl is a generated GoMock package.
package dazl

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWriter is a mock of Writer interface.
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance.
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockWriter) Debug(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Debug", arg0)
}

// Debug indicates an expected call of Debug.
func (mr *MockWriterMockRecorder) Debug(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockWriter)(nil).Debug), arg0)
}

// Error mocks base method.
func (m *MockWriter) Error(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", arg0)
}

// Error indicates an expected call of Error.
func (mr *MockWriterMockRecorder) Error(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockWriter)(nil).Error), arg0)
}

// Fatal mocks base method.
func (m *MockWriter) Fatal(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Fatal", arg0)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockWriterMockRecorder) Fatal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockWriter)(nil).Fatal), arg0)
}

// Info mocks base method.
func (m *MockWriter) Info(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Info", arg0)
}

// Info indicates an expected call of Info.
func (mr *MockWriterMockRecorder) Info(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockWriter)(nil).Info), arg0)
}

// Panic mocks base method.
func (m *MockWriter) Panic(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Panic", arg0)
}

// Panic indicates an expected call of Panic.
func (mr *MockWriterMockRecorder) Panic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panic", reflect.TypeOf((*MockWriter)(nil).Panic), arg0)
}

// Warn mocks base method.
func (m *MockWriter) Warn(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Warn", arg0)
}

// Warn indicates an expected call of Warn.
func (mr *MockWriterMockRecorder) Warn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockWriter)(nil).Warn), arg0)
}

// WithName mocks base method.
func (m *MockWriter) WithName(arg0 string) Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithName", arg0)
	ret0, _ := ret[0].(Writer)
	return ret0
}

// WithName indicates an expected call of WithName.
func (mr *MockWriterMockRecorder) WithName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithName", reflect.TypeOf((*MockWriter)(nil).WithName), arg0)
}
