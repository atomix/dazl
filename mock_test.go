// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/atomix/dazl (interfaces: Writer)

// Package dazl is a generated GoMock package.
package dazl

import (
	reflect "reflect"

	gomock "github.com/golang/mock/gomock"
)

// MockWriter is a mock of Writer interface.
type MockWriter struct {
	ctrl     *gomock.Controller
	recorder *MockWriterMockRecorder
}

// MockWriterMockRecorder is the mock recorder for MockWriter.
type MockWriterMockRecorder struct {
	mock *MockWriter
}

// NewMockWriter creates a new mock instance.
func NewMockWriter(ctrl *gomock.Controller) *MockWriter {
	mock := &MockWriter{ctrl: ctrl}
	mock.recorder = &MockWriterMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockWriter) EXPECT() *MockWriterMockRecorder {
	return m.recorder
}

// Debug mocks base method.
func (m *MockWriter) Debug(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Debug", arg0)
}

// Debug indicates an expected call of Debug.
func (mr *MockWriterMockRecorder) Debug(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Debug", reflect.TypeOf((*MockWriter)(nil).Debug), arg0)
}

// Error mocks base method.
func (m *MockWriter) Error(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Error", arg0)
}

// Error indicates an expected call of Error.
func (mr *MockWriterMockRecorder) Error(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Error", reflect.TypeOf((*MockWriter)(nil).Error), arg0)
}

// Fatal mocks base method.
func (m *MockWriter) Fatal(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Fatal", arg0)
}

// Fatal indicates an expected call of Fatal.
func (mr *MockWriterMockRecorder) Fatal(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Fatal", reflect.TypeOf((*MockWriter)(nil).Fatal), arg0)
}

// Info mocks base method.
func (m *MockWriter) Info(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Info", arg0)
}

// Info indicates an expected call of Info.
func (mr *MockWriterMockRecorder) Info(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Info", reflect.TypeOf((*MockWriter)(nil).Info), arg0)
}

// Panic mocks base method.
func (m *MockWriter) Panic(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Panic", arg0)
}

// Panic indicates an expected call of Panic.
func (mr *MockWriterMockRecorder) Panic(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Panic", reflect.TypeOf((*MockWriter)(nil).Panic), arg0)
}

// Warn mocks base method.
func (m *MockWriter) Warn(arg0 string) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "Warn", arg0)
}

// Warn indicates an expected call of Warn.
func (mr *MockWriterMockRecorder) Warn(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Warn", reflect.TypeOf((*MockWriter)(nil).Warn), arg0)
}

// WithName mocks base method.
func (m *MockWriter) WithName(arg0 string) Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithName", arg0)
	ret0, _ := ret[0].(Writer)
	return ret0
}

// WithName indicates an expected call of WithName.
func (mr *MockWriterMockRecorder) WithName(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithName", reflect.TypeOf((*MockWriter)(nil).WithName), arg0)
}

// WithMessageKey mocks base method.
func (m *MockWriter) WithMessageKey(arg0 string) Writer {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithMessageKey", arg0)
	ret0, _ := ret[0].(Writer)
	return ret0
}

// WithMessageKey indicates an expected call of WithMessageKey.
func (mr *MockWriterMockRecorder) WithMessageKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithMessageKey", reflect.TypeOf((*MockWriter)(nil).WithMessageKey), arg0)
}

// WithLevel mocks base method.
func (m *MockWriter) WithLevel() (Writer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithLevel")
	ret0, _ := ret[0].(Writer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithLevel indicates an expected call of WithLevel.
func (mr *MockWriterMockRecorder) WithLevel() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLevel", reflect.TypeOf((*MockWriter)(nil).WithLevel))
}

// WithLevelKey mocks base method.
func (m *MockWriter) WithLevelKey(arg0 string) (Writer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithLevelKey", arg0)
	ret0, _ := ret[0].(Writer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithLevelKey indicates an expected call of WithLevelKey.
func (mr *MockWriterMockRecorder) WithLevelKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLevelKey", reflect.TypeOf((*MockWriter)(nil).WithLevelKey), arg0)
}

// WithLevelFormat mocks base method.
func (m *MockWriter) WithLevelFormat(arg0 LevelFormat) (Writer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithLevelFormat", arg0)
	ret0, _ := ret[0].(Writer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithLevelFormat indicates an expected call of WithLevelFormat.
func (mr *MockWriterMockRecorder) WithLevelFormat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithLevelFormat", reflect.TypeOf((*MockWriter)(nil).WithLevelFormat), arg0)
}

// WithTime mocks base method.
func (m *MockWriter) WithTime() (Writer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTime")
	ret0, _ := ret[0].(Writer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithTime indicates an expected call of WithTime.
func (mr *MockWriterMockRecorder) WithTime() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTime", reflect.TypeOf((*MockWriter)(nil).WithTime))
}

// WithTimeKey mocks base method.
func (m *MockWriter) WithTimeKey(arg0 string) (Writer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTimeKey", arg0)
	ret0, _ := ret[0].(Writer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithTimeKey indicates an expected call of WithTimeKey.
func (mr *MockWriterMockRecorder) WithTimeKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTimeKey", reflect.TypeOf((*MockWriter)(nil).WithTimeKey), arg0)
}

// WithTimeFormat mocks base method.
func (m *MockWriter) WithTimeFormat(arg0 TimeFormat) (Writer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithTimeFormat", arg0)
	ret0, _ := ret[0].(Writer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithTimeFormat indicates an expected call of WithTimeFormat.
func (mr *MockWriterMockRecorder) WithTimeFormat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithTimeFormat", reflect.TypeOf((*MockWriter)(nil).WithTimeFormat), arg0)
}

// WithCaller mocks base method.
func (m *MockWriter) WithCaller() (Writer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithCaller")
	ret0, _ := ret[0].(Writer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithCaller indicates an expected call of WithCaller.
func (mr *MockWriterMockRecorder) WithCaller() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithCaller", reflect.TypeOf((*MockWriter)(nil).WithCaller))
}

// WithCallerKey mocks base method.
func (m *MockWriter) WithCallerKey(arg0 string) (Writer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithCallerKey", arg0)
	ret0, _ := ret[0].(Writer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithCallerKey indicates an expected call of WithCallerKey.
func (mr *MockWriterMockRecorder) WithCallerKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithCallerKey", reflect.TypeOf((*MockWriter)(nil).WithCallerKey), arg0)
}

// WithCallerFormat mocks base method.
func (m *MockWriter) WithCallerFormat(arg0 CallerFormat) (Writer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithCallerFormat", arg0)
	ret0, _ := ret[0].(Writer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithCallerFormat indicates an expected call of WithCallerFormat.
func (mr *MockWriterMockRecorder) WithCallerFormat(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithCallerFormat", reflect.TypeOf((*MockWriter)(nil).WithCallerFormat), arg0)
}

// WithStacktrace mocks base method.
func (m *MockWriter) WithStacktrace() (Writer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStacktrace")
	ret0, _ := ret[0].(Writer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithStacktrace indicates an expected call of WithStacktrace.
func (mr *MockWriterMockRecorder) WithStacktrace() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStacktrace", reflect.TypeOf((*MockWriter)(nil).WithStacktrace))
}

// WithStacktraceKey mocks base method.
func (m *MockWriter) WithStacktraceKey(arg0 string) (Writer, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithStacktraceKey", arg0)
	ret0, _ := ret[0].(Writer)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// WithStacktraceKey indicates an expected call of WithStacktraceKey.
func (mr *MockWriterMockRecorder) WithStacktraceKey(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithStacktraceKey", reflect.TypeOf((*MockWriter)(nil).WithStacktraceKey), arg0)
}
